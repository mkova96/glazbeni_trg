// <auto-generated />
using GlazbeniTrg.Data;
using GlazbeniTrg.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace GlazbeniTrg.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GlazbeniTrg.Models.Album", b =>
                {
                    b.Property<Guid>("AlbumID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AlbumName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("AlbumYear");

                    b.Property<decimal>("AvgGrade");

                    b.Property<string>("Description");

                    b.Property<int>("Format");

                    b.Property<string>("ImagePath")
                        .IsRequired();

                    b.Property<Guid>("LabelID");

                    b.Property<decimal>("Price");

                    b.Property<int>("Stock");

                    b.HasKey("AlbumID");

                    b.HasIndex("LabelID");

                    b.ToTable("Album");
                });

            modelBuilder.Entity("GlazbeniTrg.Models.AlbumGenre", b =>
                {
                    b.Property<Guid>("AlbumID");

                    b.Property<Guid>("GenreID");

                    b.HasKey("AlbumID", "GenreID");

                    b.HasIndex("GenreID");

                    b.ToTable("AlbumGenre");
                });

            modelBuilder.Entity("GlazbeniTrg.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<Guid>("CityID");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("CityID");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("GlazbeniTrg.Models.CartAlbum", b =>
                {
                    b.Property<Guid>("CartAlbumID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AlbumID");

                    b.Property<Guid>("CartID");

                    b.Property<int>("quantity");

                    b.HasKey("CartAlbumID");

                    b.HasIndex("AlbumID");

                    b.ToTable("CartAlbum");
                });

            modelBuilder.Entity("GlazbeniTrg.Models.City", b =>
                {
                    b.Property<Guid>("CityID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<Guid>("CountryID");

                    b.Property<int>("PostCode");

                    b.HasKey("CityID");

                    b.HasIndex("CountryID");

                    b.ToTable("City");
                });

            modelBuilder.Entity("GlazbeniTrg.Models.Country", b =>
                {
                    b.Property<Guid>("CountryID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("CountryID");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("GlazbeniTrg.Models.Genre", b =>
                {
                    b.Property<Guid>("GenreID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId");

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("GenreID");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Genre");
                });

            modelBuilder.Entity("GlazbeniTrg.Models.Label", b =>
                {
                    b.Property<Guid>("LabelID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LabelName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("LabelID");

                    b.ToTable("Label");
                });

            modelBuilder.Entity("GlazbeniTrg.Models.Order", b =>
                {
                    b.Property<Guid>("OrderID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("City")
                        .HasMaxLength(100);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("OrderDate");

                    b.Property<decimal>("PriceSum");

                    b.Property<string>("UserId");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("OrderID");

                    b.HasIndex("UserId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("GlazbeniTrg.Models.OrderDetail", b =>
                {
                    b.Property<Guid>("OrderDetailId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AlbumId");

                    b.Property<int>("Amount");

                    b.Property<Guid>("OrderID");

                    b.Property<decimal>("Price");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("AlbumId");

                    b.HasIndex("OrderID");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("GlazbeniTrg.Models.Person", b =>
                {
                    b.Property<Guid>("PersonID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId");

                    b.Property<string>("Bio");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName");

                    b.HasKey("PersonID");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("GlazbeniTrg.Models.Rating", b =>
                {
                    b.Property<Guid>("AlbumID");

                    b.Property<string>("Id");

                    b.Property<string>("ApplicationUserId");

                    b.Property<int>("Grade");

                    b.Property<DateTime>("GradeDate");

                    b.HasKey("AlbumID", "Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("GlazbeniTrg.Models.Song", b =>
                {
                    b.Property<Guid>("SongID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AlbumID");

                    b.Property<TimeSpan>("Duration");

                    b.Property<string>("SongName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("SongYear");

                    b.HasKey("SongID");

                    b.HasIndex("AlbumID");

                    b.ToTable("Song");
                });

            modelBuilder.Entity("GlazbeniTrg.Models.SongAlbum", b =>
                {
                    b.Property<Guid>("SongID");

                    b.Property<Guid>("AlbumID");

                    b.HasKey("SongID", "AlbumID");

                    b.HasIndex("AlbumID");

                    b.ToTable("SongAlbum");
                });

            modelBuilder.Entity("GlazbeniTrg.Models.SongGenre", b =>
                {
                    b.Property<Guid>("SongID");

                    b.Property<Guid>("GenreID");

                    b.HasKey("SongID", "GenreID");

                    b.HasIndex("GenreID");

                    b.ToTable("SongGenre");
                });

            modelBuilder.Entity("GlazbeniTrg.Models.SongPerson", b =>
                {
                    b.Property<Guid>("SongID");

                    b.Property<Guid>("PersonID");

                    b.Property<int>("Function");

                    b.HasKey("SongID", "PersonID");

                    b.HasIndex("PersonID");

                    b.ToTable("SongPerson");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("GlazbeniTrg.Models.Album", b =>
                {
                    b.HasOne("GlazbeniTrg.Models.Label", "Label")
                        .WithMany("Albums")
                        .HasForeignKey("LabelID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GlazbeniTrg.Models.AlbumGenre", b =>
                {
                    b.HasOne("GlazbeniTrg.Models.Album", "Album")
                        .WithMany("AlbumGenres")
                        .HasForeignKey("AlbumID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GlazbeniTrg.Models.Genre", "Genre")
                        .WithMany("AlbumGenres")
                        .HasForeignKey("GenreID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GlazbeniTrg.Models.ApplicationUser", b =>
                {
                    b.HasOne("GlazbeniTrg.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GlazbeniTrg.Models.CartAlbum", b =>
                {
                    b.HasOne("GlazbeniTrg.Models.Album", "Album")
                        .WithMany()
                        .HasForeignKey("AlbumID");
                });

            modelBuilder.Entity("GlazbeniTrg.Models.City", b =>
                {
                    b.HasOne("GlazbeniTrg.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GlazbeniTrg.Models.Genre", b =>
                {
                    b.HasOne("GlazbeniTrg.Models.ApplicationUser")
                        .WithMany("PrefGenres")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("GlazbeniTrg.Models.Order", b =>
                {
                    b.HasOne("GlazbeniTrg.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("GlazbeniTrg.Models.OrderDetail", b =>
                {
                    b.HasOne("GlazbeniTrg.Models.Album", "Album")
                        .WithMany()
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GlazbeniTrg.Models.Order", "Order")
                        .WithMany("OrderLines")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GlazbeniTrg.Models.Person", b =>
                {
                    b.HasOne("GlazbeniTrg.Models.ApplicationUser")
                        .WithMany("PrefArtists")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("GlazbeniTrg.Models.Rating", b =>
                {
                    b.HasOne("GlazbeniTrg.Models.Album", "Album")
                        .WithMany("Ratings")
                        .HasForeignKey("AlbumID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GlazbeniTrg.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Ratings")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("GlazbeniTrg.Models.Song", b =>
                {
                    b.HasOne("GlazbeniTrg.Models.Album")
                        .WithMany("Songs")
                        .HasForeignKey("AlbumID");
                });

            modelBuilder.Entity("GlazbeniTrg.Models.SongAlbum", b =>
                {
                    b.HasOne("GlazbeniTrg.Models.Album", "Album")
                        .WithMany("SongAlbums")
                        .HasForeignKey("AlbumID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GlazbeniTrg.Models.Song", "Song")
                        .WithMany("SongAlbums")
                        .HasForeignKey("SongID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GlazbeniTrg.Models.SongGenre", b =>
                {
                    b.HasOne("GlazbeniTrg.Models.Genre", "Genre")
                        .WithMany("SongGenres")
                        .HasForeignKey("GenreID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GlazbeniTrg.Models.Song", "Song")
                        .WithMany("SongGenres")
                        .HasForeignKey("SongID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GlazbeniTrg.Models.SongPerson", b =>
                {
                    b.HasOne("GlazbeniTrg.Models.Person", "Person")
                        .WithMany("SongPersons")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GlazbeniTrg.Models.Song", "Song")
                        .WithMany("SongPersons")
                        .HasForeignKey("SongID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GlazbeniTrg.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GlazbeniTrg.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GlazbeniTrg.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GlazbeniTrg.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
